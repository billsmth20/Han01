//端口定义
int lcd_ce=2;
int lcd_rst=3;
int sclk=4;
int sdin=5;
int lcd_dc=9;
const unsigned char font6x8[][6] ={ 
    { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 },   // sp 
    { 0x00, 0x00, 0x00, 0x2f, 0x00, 0x00 },   // ! 
    { 0x00, 0x00, 0x07, 0x00, 0x07, 0x00 },   // " 
    { 0x00, 0x14, 0x7f, 0x14, 0x7f, 0x14 },   // # 
    { 0x00, 0x24, 0x2a, 0x7f, 0x2a, 0x12 },   // $ 
    { 0x00, 0x62, 0x64, 0x08, 0x13, 0x23 },   // % 
    { 0x00, 0x36, 0x49, 0x55, 0x22, 0x50 },   // & 
    { 0x00, 0x00, 0x05, 0x03, 0x00, 0x00 },   // ' 
    { 0x00, 0x00, 0x1c, 0x22, 0x41, 0x00 },   // ( 
    { 0x00, 0x00, 0x41, 0x22, 0x1c, 0x00 },   // ) 
    { 0x00, 0x14, 0x08, 0x3e, 0x08, 0x14 },   // * 
    { 0x00, 0x08, 0x08, 0x3e, 0x08, 0x08 },   // + 
    { 0x00, 0x00, 0x00, 0xa0, 0x60, 0x00 },   // , 
    { 0x00, 0x08, 0x08, 0x08, 0x08, 0x08 },   // - 
    { 0x00, 0x00, 0x60, 0x60, 0x00, 0x00 },   // . 
    { 0x00, 0x20, 0x10, 0x08, 0x04, 0x02 },   // / 
    { 0x00, 0x3e, 0x51, 0x49, 0x45, 0x3e },   // 0 
    { 0x00, 0x00, 0x42, 0x7f, 0x40, 0x00 },   // 1 
    { 0x00, 0x42, 0x61, 0x51, 0x49, 0x46 },   // 2 
    { 0x00, 0x21, 0x41, 0x45, 0x4b, 0x31 },   // 3 
    { 0x00, 0x18, 0x14, 0x12, 0x7f, 0x10 },   // 4 
    { 0x00, 0x27, 0x45, 0x45, 0x45, 0x39 },   // 5 
    { 0x00, 0x3c, 0x4a, 0x49, 0x49, 0x30 },   // 6 
    { 0x00, 0x01, 0x71, 0x09, 0x05, 0x03 },   // 7 
    { 0x00, 0x36, 0x49, 0x49, 0x49, 0x36 },   // 8 
    { 0x00, 0x06, 0x49, 0x49, 0x29, 0x1e },   // 9 
    { 0x00, 0x00, 0x36, 0x36, 0x00, 0x00 },   // : 
    { 0x00, 0x00, 0x56, 0x36, 0x00, 0x00 },   // ; 
    { 0x00, 0x08, 0x14, 0x22, 0x41, 0x00 },   // <<SPAN class=apple-converted-space> 
    { 0x00, 0x14, 0x14, 0x14, 0x14, 0x14 },   // = 
    { 0x00, 0x00, 0x41, 0x22, 0x14, 0x08 },   // > 
    { 0x00, 0x02, 0x01, 0x51, 0x09, 0x06 },   // ? 
    { 0x00, 0x32, 0x49, 0x59, 0x51, 0x3e },   // @ 
    { 0x00, 0x7c, 0x12, 0x11, 0x12, 0x7c },   // a 
    { 0x00, 0x7f, 0x49, 0x49, 0x49, 0x36 },   // b 
    { 0x00, 0x3e, 0x41, 0x41, 0x41, 0x22 },   // c 
    { 0x00, 0x7f, 0x41, 0x41, 0x22, 0x1c },   // d 
    { 0x00, 0x7f, 0x49, 0x49, 0x49, 0x41 },   // e 
    { 0x00, 0x7f, 0x09, 0x09, 0x09, 0x01 },   // f 
    { 0x00, 0x3e, 0x41, 0x49, 0x49, 0x7a },   // g 
    { 0x00, 0x7f, 0x08, 0x08, 0x08, 0x7f },   // h 
    { 0x00, 0x00, 0x41, 0x7f, 0x41, 0x00 },   // i 
    { 0x00, 0x20, 0x40, 0x41, 0x3f, 0x01 },   // j 
    { 0x00, 0x7f, 0x08, 0x14, 0x22, 0x41 },   // k 
    { 0x00, 0x7f, 0x40, 0x40, 0x40, 0x40 },   // l 
    { 0x00, 0x7f, 0x02, 0x0c, 0x02, 0x7f },   // m 
    { 0x00, 0x7f, 0x04, 0x08, 0x10, 0x7f },   // n 
    { 0x00, 0x3e, 0x41, 0x41, 0x41, 0x3e },   // o 
    { 0x00, 0x7f, 0x09, 0x09, 0x09, 0x06 },   // p 
    { 0x00, 0x3e, 0x41, 0x51, 0x21, 0x5e },   // q 
    { 0x00, 0x7f, 0x09, 0x19, 0x29, 0x46 },   // r 
    { 0x00, 0x46, 0x49, 0x49, 0x49, 0x31 },   // s 
    { 0x00, 0x01, 0x01, 0x7f, 0x01, 0x01 },   // t 
    { 0x00, 0x3f, 0x40, 0x40, 0x40, 0x3f },   // u 
    { 0x00, 0x1f, 0x20, 0x40, 0x20, 0x1f },   // v 
    { 0x00, 0x3f, 0x40, 0x38, 0x40, 0x3f },   // w 
    { 0x00, 0x63, 0x14, 0x08, 0x14, 0x63 },   // x 
    { 0x00, 0x07, 0x08, 0x70, 0x08, 0x07 },   // y 
    { 0x00, 0x61, 0x51, 0x49, 0x45, 0x43 },   // z 
    { 0x00, 0x00, 0x7f, 0x41, 0x41, 0x00 },   // [ 
    { 0x00, 0x55, 0x2a, 0x55, 0x2a, 0x55 },   // 55 
    { 0x00, 0x00, 0x41, 0x41, 0x7f, 0x00 },   // ] 
    { 0x00, 0x04, 0x02, 0x01, 0x02, 0x04 },   // ^ 
    { 0x00, 0x40, 0x40, 0x40, 0x40, 0x40 },   // _ 
    { 0x00, 0x00, 0x01, 0x02, 0x04, 0x00 },   // ' 
    { 0x00, 0x20, 0x54, 0x54, 0x54, 0x78 },   // a 
    { 0x00, 0x7f, 0x48, 0x44, 0x44, 0x38 },   // b 
    { 0x00, 0x38, 0x44, 0x44, 0x44, 0x20 },   // c 
    { 0x00, 0x38, 0x44, 0x44, 0x48, 0x7f },   // d 
    { 0x00, 0x38, 0x54, 0x54, 0x54, 0x18 },   // e 
    { 0x00, 0x08, 0x7e, 0x09, 0x01, 0x02 },   // f 
    { 0x00, 0x18, 0xa4, 0xa4, 0xa4, 0x7c },   // g 
    { 0x00, 0x7f, 0x08, 0x04, 0x04, 0x78 },   // h 
    { 0x00, 0x00, 0x44, 0x7d, 0x40, 0x00 },   // i 
    { 0x00, 0x40, 0x80, 0x84, 0x7d, 0x00 },   // j 
    { 0x00, 0x7f, 0x10, 0x28, 0x44, 0x00 },   // k 
    { 0x00, 0x00, 0x41, 0x7f, 0x40, 0x00 },   // l 
    { 0x00, 0x7c, 0x04, 0x18, 0x04, 0x78 },   // m 
    { 0x00, 0x7c, 0x08, 0x04, 0x04, 0x78 },   // n 
    { 0x00, 0x38, 0x44, 0x44, 0x44, 0x38 },   // o 
    { 0x00, 0xfc, 0x24, 0x24, 0x24, 0x18 },   // p 
    { 0x00, 0x18, 0x24, 0x24, 0x18, 0xfc },   // q 
    { 0x00, 0x7c, 0x08, 0x04, 0x04, 0x08 },   // r 
    { 0x00, 0x48, 0x54, 0x54, 0x54, 0x20 },   // s 
    { 0x00, 0x04, 0x3f, 0x44, 0x40, 0x20 },   // t 
    { 0x00, 0x3c, 0x40, 0x40, 0x20, 0x7c },   // u 
    { 0x00, 0x1c, 0x20, 0x40, 0x20, 0x1c },   // v 
    { 0x00, 0x3c, 0x40, 0x30, 0x40, 0x3c },   // w 
    { 0x00, 0x44, 0x28, 0x10, 0x28, 0x44 },   // x 
    { 0x00, 0x1c, 0xa0, 0xa0, 0xa0, 0x7c },   // y 
    { 0x00, 0x44, 0x64, 0x54, 0x4c, 0x44 },   // z 
    { 0x14, 0x14, 0x14, 0x14, 0x14, 0x14 }    // horiz lines 
}; 

void lcd_write_byte(unsigned char dat, unsigned char command){ 
    unsigned char i; 
    digitalWrite( lcd_ce, LOW); // 使能lcd_ce = 0 
    if (command == 0){ 
      digitalWrite( lcd_dc, LOW);// 传送命令 lcd_dc = 0; 
    }else{ 
      digitalWrite( lcd_dc, HIGH);// 传送数据lcd_dc = 1; 
    } 

  for(i=0;i<8;i++){ 
    if(dat&0x80){ 
      digitalWrite( sdin, HIGH);//sdin = 1; 
    }else{ 
      digitalWrite( sdin, LOW);//sdin = 0; 
    } 
    digitalWrite( sclk, LOW);//sclk = 0; 
    dat = dat << 1; 
    digitalWrite( sclk, HIGH);//sclk = 1; 
  } 
  digitalWrite( lcd_ce, HIGH);//lcd_ce = 1; 
} 
void lcd_clear(void){ 
  unsigned int i; 
  lcd_write_byte(0x0c, 0);  
  lcd_write_byte(0x80, 0); 
  for (i=0; i<504; i++){ 
    lcd_write_byte(0, 1); 
  }    
} 
void lcd_init(void){ 
  //先设置为输出 
  pinMode(sclk,OUTPUT); 
  pinMode(sdin,OUTPUT);
  pinMode(lcd_dc,OUTPUT); 
  pinMode(lcd_ce,OUTPUT);
  pinMode(lcd_rst,OUTPUT);
    
  // 产生一个让lcd复位的低电平脉冲 
  digitalWrite( lcd_rst, LOW); 
    
  delayMicroseconds(1);
  digitalWrite( lcd_rst, HIGH); 
     
  // 关闭lcd 
  digitalWrite( lcd_ce, LOW); 
  delayMicroseconds(1);

  // 使能lcd 
  digitalWrite( lcd_ce, HIGH); //lcd_ce = 1; 
  delayMicroseconds(1); 
  lcd_write_byte(0x21, 0); // 使用扩展命令设置lcd模式 
  lcd_write_byte(0xc8, 0); // 设置偏置电压 
  lcd_write_byte(0x06, 0); // 温度校正 
  lcd_write_byte(0x13, 0); // 1:48 
  lcd_write_byte(0x20, 0); // 使用基本命令 
  lcd_clear();             // 清屏 
  lcd_write_byte(0x0c, 0); // 设定显示模式，正常显示 
         
  // 关闭lcd 
  digitalWrite( lcd_ce, LOW);  //lcd_ce = 0; 
} 
void lcd_set_xy(unsigned char x, unsigned char y){ 
  lcd_write_byte(0x40 | y, 0);// column 
  lcd_write_byte(0x80 | x, 0);// row 
} 
void lcd_write_char(unsigned char c){ 
  unsigned char line; 
  c -= 32; 
  for (line=0; line<6; line++){ 
    lcd_write_byte(font6x8[c][line], 1); 
  } 
} 
void lcd_write_english_string(unsigned char x,unsigned char y,char *s){ 
  lcd_set_xy(x,y); 
  while (*s){ 
    lcd_write_char(*s); 
    s++; 
  } 
} 

